# -*- coding: utf-8 -*-
"""Copy of creditfinal

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p1-p-peB2BAo30ob_tuQrIC66vN1Nopv
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from joblib import dump

# Load data
df = pd.read_csv("/content/german_credit_data.csv.csv")

# Drop the index column
df.drop(columns=['Unnamed: 0'], inplace=True)

# Fill missing values
df['Saving accounts'].fillna('none', inplace=True)
df['Checking account'].fillna('none', inplace=True)

# TEMP: Create a synthetic target variable based on Credit amount (you can replace this)
df['Risk'] = df['Credit amount'].apply(lambda x: 1 if x < 2000 else 0)  # 1 = Good, 0 = Bad

# Encode categorical variables
label_encoders = {}
for col in df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Features and target
X = df.drop(columns='Risk')
y = df['Risk']

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split and train
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

# Save model
dump(model, 'credit_model.joblib')
dump(scaler, 'scaler.joblib')
dump(label_encoders, 'label_encoders.joblib')

def predict_new(data_dict):
    import pandas as pd
    from joblib import load

    # Load saved model and preprocessors
    model = load('credit_model.joblib')
    scaler = load('scaler.joblib')
    label_encoders = load('label_encoders.joblib')

    # Convert to DataFrame
    new_data = pd.DataFrame([data_dict])

    # Encode categorical variables
    for col, le in label_encoders.items():
        new_data[col] = le.transform(new_data[col])

    # Scale numeric data
    new_data_scaled = scaler.transform(new_data)

    # Predict
    prediction = model.predict(new_data_scaled)
    return "Good Risk" if prediction[0] == 1 else "Bad Risk"

# Example usage
sample_input = {
    'Age': 30,
    'Sex': 'male',
    'Job': 2,
    'Housing': 'own',
    'Saving accounts': 'none',
    'Checking account': 'moderate',
    'Credit amount': 1500,
    'Duration': 12,
    'Purpose': 'radio/TV'
}

print(predict_new(sample_input))

pip install streamlit

!pip install streamlit pyngrok --quiet

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

import os
os.listdir()

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# from joblib import load
# 
# model = load('credit_model.joblib')
# scaler = load('scaler.joblib')
# label_encoders = load('label_encoders.joblib')
# 
# st.title("Credit Scoring Prediction App")
# st.sidebar.header("Enter Applicant Information")
# 
# age = st.sidebar.slider("Age", 18, 75, 30)
# sex = st.sidebar.selectbox("Sex", ["male", "female"])
# job = st.sidebar.selectbox("Job (0=unskilled, 3=highly skilled)", [0, 1, 2, 3])
# housing = st.sidebar.selectbox("Housing", ["own", "free", "rent"])
# saving_acc = st.sidebar.selectbox("Saving accounts", ["none", "little", "moderate", "quite rich", "rich"])
# checking_acc = st.sidebar.selectbox("Checking account", ["none", "little", "moderate", "rich"])
# credit_amount = st.sidebar.number_input("Credit amount", min_value=100, max_value=20000, value=1500)
# duration = st.sidebar.slider("Duration (months)", 4, 72, 24)
# purpose = st.sidebar.selectbox("Purpose", ["radio/TV", "education", "furniture/equipment", "car", "business", "domestic appliances", "repairs", "vacation/others"])
# 
# input_dict = {
#     'Age': age,
#     'Sex': sex,
#     'Job': job,
#     'Housing': housing,
#     'Saving accounts': saving_acc,
#     'Checking account': checking_acc,
#     'Credit amount': credit_amount,
#     'Duration': duration,
#     'Purpose': purpose
# }
# 
# if st.button("Predict Credit Risk"):
#     input_df = pd.DataFrame([input_dict])
#     for col, le in label_encoders.items():
#         input_df[col] = le.transform(input_df[col])
#     input_scaled = scaler.transform(input_df)
#     prediction = model.predict(input_scaled)[0]
#     result = "Good Risk ✅" if prediction == 1 else "Bad Risk ❌"
#     st.subheader(f"Prediction: {result}")

!pip install streamlit pyngrok joblib --quiet

!pip install pyngrok --quiet

!ls

from joblib import load

from joblib import load

model = load('credit_model.joblib')
scaler = load('scaler.joblib')
label_encoders = load('label_encoders.joblib')

from pyngrok import ngrok, conf

conf.get_default().auth_token = "2wXFpPXL14cTjKIDKo9nt1WSjrd_4pzGgWa9sHXnRVCuQ7aMA"  # Replace with your real token
ngrok.kill()

get_ipython().system_raw("streamlit run app.py &")
public_url = ngrok.connect(8501)
print(f"🚀 Your app is live at: {public_url}")
