{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1A3WJk-9KNkck1WwLvwp3GBikC60StedC","timestamp":1746263979285}],"authorship_tag":"ABX9TyMnrY58KJD8mciOIfcaUqdd"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8kUWzCM4jcfz","executionInfo":{"status":"ok","timestamp":1746182331863,"user_tz":-330,"elapsed":3479,"user":{"displayName":"Brahma Kumar","userId":"16343279751235560763"}},"outputId":"4754f16a-9f83-408d-c79b-90d360680d44"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.99      0.96      0.98       109\n","           1       0.96      0.99      0.97        91\n","\n","    accuracy                           0.97       200\n","   macro avg       0.97      0.98      0.97       200\n","weighted avg       0.98      0.97      0.98       200\n","\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-2-7a271553b695>:15: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Saving accounts'].fillna('none', inplace=True)\n","<ipython-input-2-7a271553b695>:16: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Checking account'].fillna('none', inplace=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["['label_encoders.joblib']"]},"metadata":{},"execution_count":2}],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import classification_report\n","from joblib import dump\n","\n","# Load data\n","df = pd.read_csv(\"/content/german_credit_data.csv.csv\")\n","\n","# Drop the index column\n","df.drop(columns=['Unnamed: 0'], inplace=True)\n","\n","# Fill missing values\n","df['Saving accounts'].fillna('none', inplace=True)\n","df['Checking account'].fillna('none', inplace=True)\n","\n","# TEMP: Create a synthetic target variable based on Credit amount (you can replace this)\n","df['Risk'] = df['Credit amount'].apply(lambda x: 1 if x < 2000 else 0)  # 1 = Good, 0 = Bad\n","\n","# Encode categorical variables\n","label_encoders = {}\n","for col in df.select_dtypes(include='object').columns:\n","    le = LabelEncoder()\n","    df[col] = le.fit_transform(df[col])\n","    label_encoders[col] = le\n","\n","# Features and target\n","X = df.drop(columns='Risk')\n","y = df['Risk']\n","\n","# Standardize features\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","# Split and train\n","X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n","model = LogisticRegression()\n","model.fit(X_train, y_train)\n","\n","# Evaluate\n","y_pred = model.predict(X_test)\n","print(classification_report(y_test, y_pred))\n","\n","# Save model\n","dump(model, 'credit_model.joblib')\n","dump(scaler, 'scaler.joblib')\n","dump(label_encoders, 'label_encoders.joblib')"]},{"cell_type":"code","source":["def predict_new(data_dict):\n","    import pandas as pd\n","    from joblib import load\n","\n","    # Load saved model and preprocessors\n","    model = load('credit_model.joblib')\n","    scaler = load('scaler.joblib')\n","    label_encoders = load('label_encoders.joblib')\n","\n","    # Convert to DataFrame\n","    new_data = pd.DataFrame([data_dict])\n","\n","    # Encode categorical variables\n","    for col, le in label_encoders.items():\n","        new_data[col] = le.transform(new_data[col])\n","\n","    # Scale numeric data\n","    new_data_scaled = scaler.transform(new_data)\n","\n","    # Predict\n","    prediction = model.predict(new_data_scaled)\n","    return \"Good Risk\" if prediction[0] == 1 else \"Bad Risk\"\n","\n","# Example usage\n","sample_input = {\n","    'Age': 30,\n","    'Sex': 'male',\n","    'Job': 2,\n","    'Housing': 'own',\n","    'Saving accounts': 'none',\n","    'Checking account': 'moderate',\n","    'Credit amount': 1500,\n","    'Duration': 12,\n","    'Purpose': 'radio/TV'\n","}\n","\n","print(predict_new(sample_input))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WxU8NmoAkO47","executionInfo":{"status":"ok","timestamp":1746182350526,"user_tz":-330,"elapsed":22,"user":{"displayName":"Brahma Kumar","userId":"16343279751235560763"}},"outputId":"e83fb610-b615-4146-ce45-1fed15840cd9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Good Risk\n"]}]},{"cell_type":"code","source":["pip install streamlit"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tYSiG6HblCVo","executionInfo":{"status":"ok","timestamp":1746182374375,"user_tz":-330,"elapsed":8392,"user":{"displayName":"Brahma Kumar","userId":"16343279751235560763"}},"outputId":"c591a66f-e2bd-43b7-a348-9ee8965e08e4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting streamlit\n","  Downloading streamlit-1.45.0-py3-none-any.whl.metadata (8.9 kB)\n","Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n","Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n","Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n","Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.1.8)\n","Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n","Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n","Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n","Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.2.1)\n","Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n","Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n","Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n","Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n","Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n","Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.13.2)\n","Collecting watchdog<7,>=2.1.5 (from streamlit)\n","  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n","Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n","  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n","Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n","Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n","Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.37.1)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.4.26)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.24.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n","Downloading streamlit-1.45.0-py3-none-any.whl (9.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.9/9.9 MB\u001b[0m \u001b[31m80.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m97.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: watchdog, pydeck, streamlit\n","Successfully installed pydeck-0.9.1 streamlit-1.45.0 watchdog-6.0.0\n"]}]},{"cell_type":"code","source":["!pip install streamlit pyngrok --quiet"],"metadata":{"id":"r-mWNe6ZlGHN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"HJjydAZElXb-","executionInfo":{"status":"ok","timestamp":1746182532518,"user_tz":-330,"elapsed":14246,"user":{"displayName":"Brahma Kumar","userId":"16343279751235560763"}},"outputId":"70c01def-1cb4-4c23-f479-9e58e30c7b28"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-7900588f-d9ae-4ab3-9939-59c275ecc19f\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-7900588f-d9ae-4ab3-9939-59c275ecc19f\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving credit_model.joblib.html to credit_model.joblib.html\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"Z1EA06vRlrTF","executionInfo":{"status":"ok","timestamp":1746182547472,"user_tz":-330,"elapsed":7754,"user":{"displayName":"Brahma Kumar","userId":"16343279751235560763"}},"outputId":"4ddb68ff-f573-4242-a815-72a62a93a5c0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-a6e38253-0cf5-4252-9d30-5a13d4356ef1\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-a6e38253-0cf5-4252-9d30-5a13d4356ef1\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving scaler.joblib.html to scaler.joblib.html\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"W4jExMNClwhu","executionInfo":{"status":"ok","timestamp":1746182566778,"user_tz":-330,"elapsed":7984,"user":{"displayName":"Brahma Kumar","userId":"16343279751235560763"}},"outputId":"6796e9b7-c66b-4f5e-ed08-e4785a281596"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-32f94321-d561-44bb-93b7-e8ed105a65e1\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-32f94321-d561-44bb-93b7-e8ed105a65e1\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving label_encoders.joblib.html to label_encoders.joblib.html\n"]}]},{"cell_type":"code","source":["import os\n","os.listdir()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o7sCNE0vl1MR","executionInfo":{"status":"ok","timestamp":1746182597849,"user_tz":-330,"elapsed":55,"user":{"displayName":"Brahma Kumar","userId":"16343279751235560763"}},"outputId":"9d7b526d-6c8d-4626-97cf-c28d07c8227e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['.config',\n"," 'scaler.joblib.html',\n"," 'german_credit_data.csv.csv',\n"," 'credit_model.joblib',\n"," 'label_encoders.joblib',\n"," 'label_encoders.joblib.html',\n"," 'scaler.joblib',\n"," 'credit_model.joblib.html',\n"," 'sample_data']"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["%%writefile app.py\n","import streamlit as st\n","import pandas as pd\n","from joblib import load\n","\n","model = load('credit_model.joblib')\n","scaler = load('scaler.joblib')\n","label_encoders = load('label_encoders.joblib')\n","\n","st.title(\"Credit Scoring Prediction App\")\n","st.sidebar.header(\"Enter Applicant Information\")\n","\n","age = st.sidebar.slider(\"Age\", 18, 75, 30)\n","sex = st.sidebar.selectbox(\"Sex\", [\"male\", \"female\"])\n","job = st.sidebar.selectbox(\"Job (0=unskilled, 3=highly skilled)\", [0, 1, 2, 3])\n","housing = st.sidebar.selectbox(\"Housing\", [\"own\", \"free\", \"rent\"])\n","saving_acc = st.sidebar.selectbox(\"Saving accounts\", [\"none\", \"little\", \"moderate\", \"quite rich\", \"rich\"])\n","checking_acc = st.sidebar.selectbox(\"Checking account\", [\"none\", \"little\", \"moderate\", \"rich\"])\n","credit_amount = st.sidebar.number_input(\"Credit amount\", min_value=100, max_value=20000, value=1500)\n","duration = st.sidebar.slider(\"Duration (months)\", 4, 72, 24)\n","purpose = st.sidebar.selectbox(\"Purpose\", [\"radio/TV\", \"education\", \"furniture/equipment\", \"car\", \"business\", \"domestic appliances\", \"repairs\", \"vacation/others\"])\n","\n","input_dict = {\n","    'Age': age,\n","    'Sex': sex,\n","    'Job': job,\n","    'Housing': housing,\n","    'Saving accounts': saving_acc,\n","    'Checking account': checking_acc,\n","    'Credit amount': credit_amount,\n","    'Duration': duration,\n","    'Purpose': purpose\n","}\n","\n","if st.button(\"Predict Credit Risk\"):\n","    input_df = pd.DataFrame([input_dict])\n","    for col, le in label_encoders.items():\n","        input_df[col] = le.transform(input_df[col])\n","    input_scaled = scaler.transform(input_df)\n","    prediction = model.predict(input_scaled)[0]\n","    result = \"Good Risk ✅\" if prediction == 1 else \"Bad Risk ❌\"\n","    st.subheader(f\"Prediction: {result}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9lnX_YeIl-th","executionInfo":{"status":"ok","timestamp":1746182618113,"user_tz":-330,"elapsed":29,"user":{"displayName":"Brahma Kumar","userId":"16343279751235560763"}},"outputId":"9a437f3b-4ff3-412b-bced-e32ff2d9d677"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Writing app.py\n"]}]},{"cell_type":"code","source":["!pip install streamlit pyngrok joblib --quiet"],"metadata":{"id":"kQleVmsimIhX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install pyngrok --quiet"],"metadata":{"id":"O1W7zHnZmOro"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VudqAAoPm7Jb","executionInfo":{"status":"ok","timestamp":1746182864679,"user_tz":-330,"elapsed":111,"user":{"displayName":"Brahma Kumar","userId":"16343279751235560763"}},"outputId":"83df0c9e-0564-402c-e4d5-7b2d6930ef11"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["app.py\t\t\t  german_credit_data.csv.csv  sample_data\n","credit_model.joblib\t  label_encoders.joblib       scaler.joblib\n","credit_model.joblib.html  label_encoders.joblib.html  scaler.joblib.html\n"]}]},{"cell_type":"code","source":["from joblib import load"],"metadata":{"id":"0fntfg8_nNbL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from joblib import load\n","\n","model = load('credit_model.joblib')\n","scaler = load('scaler.joblib')\n","label_encoders = load('label_encoders.joblib')"],"metadata":{"id":"vK1ZIWXzncvO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from pyngrok import ngrok, conf\n","\n","conf.get_default().auth_token = \"2wXFpPXL14cTjKIDKo9nt1WSjrd_4pzGgWa9sHXnRVCuQ7aMA\"  # Replace with your real token\n","ngrok.kill()\n","\n","get_ipython().system_raw(\"streamlit run app.py &\")\n","public_url = ngrok.connect(8501)\n","print(f\"🚀 Your app is live at: {public_url}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xvc0GkCXngRv","executionInfo":{"status":"ok","timestamp":1746183050026,"user_tz":-330,"elapsed":392,"user":{"displayName":"Brahma Kumar","userId":"16343279751235560763"}},"outputId":"d23a84e2-8d4c-46f0-eea9-043b484eaa4e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["🚀 Your app is live at: NgrokTunnel: \"https://0a48-34-82-213-18.ngrok-free.app\" -> \"http://localhost:8501\"\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"euE1RF_NntAX"},"execution_count":null,"outputs":[]}]}
