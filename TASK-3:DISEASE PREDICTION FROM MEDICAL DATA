# -*- coding: utf-8 -*-
"""disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lX7NpUJfB0kOUl9Hc5BcN8c8dSUHg-7Q
"""

from google.colab import files
uploaded = files.upload()

# Step 1: Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

# Step 2: Load dataset
df = pd.read_csv('/content/diabetes.csv')
df.head()

# Step 3: Check for nulls and descriptive stats
print(df.isnull().sum())
print(df.describe())

# Optional: Check for 0s in columns where it makes no sense (e.g., Glucose, BMI)
zero_cols = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
df[zero_cols] = df[zero_cols].replace(0, np.nan)

# Fill missing values with median
df.fillna(df.median(), inplace=True)

# Step 4: Split into X (features) and y (target)
X = df.drop('Outcome', axis=1)
y = df['Outcome']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train a Random Forest Classifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Step 6: Make predictions
y_pred = model.predict(X_test)

# Step 7: Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# Step 8: Feature importance
importances = model.feature_importances_
features = X.columns

plt.figure(figsize=(10,6))
sns.barplot(x=importances, y=features)
plt.title("Feature Importance")
plt.show()

from sklearn.metrics import roc_curve, roc_auc_score

y_prob = model.predict_proba(X_test)[:, 1]
fpr, tpr, _ = roc_curve(y_test, y_prob)

plt.plot(fpr, tpr)
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.show()

print("AUC Score:", roc_auc_score(y_test, y_prob))

import pandas as pd
import numpy as np
import joblib  # to load the trained model

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import joblib

# Example data (replace with your actual dataset)
data = pd.DataFrame({
    'fever': [1, 0, 1, 0],
    'cough': [1, 1, 0, 0],
    'fatigue': [1, 1, 0, 0],
    'headache': [0, 1, 0, 1],
    'disease': ['Flu', 'Cold', 'Healthy', 'Healthy']
})

# Features and target
X = data[['fever', 'cough', 'fatigue', 'headache']]
y = data['disease']

# Train model
model = RandomForestClassifier()
model.fit(X, y)

# Save the model
joblib.dump(model, 'disease_model.pkl')
print("Model saved successfully!")

model = joblib.load("disease_model.pkl")

symptom_list = ['fever', 'cough', 'fatigue', 'headache']

print("Please answer the following symptoms with 1 (yes) or 0 (no):")
user_input = []

for symptom in symptom_list:
    while True:
        try:
            value = int(input(f"Do you have {symptom}? (1 = yes, 0 = no): "))
            if value in [0, 1]:
                user_input.append(value)
                break
            else:
                print("Enter only 1 or 0.")
        except ValueError:
            print("Invalid input. Please enter 1 or 0.")

input_array = np.array(user_input).reshape(1, -1)
prediction = model.predict(input_array)

print("\n🩺 Predicted disease:", prediction[0])

input_array = np.array(user_input).reshape(1, -1)
prediction = model.predict(input_array)

import pandas as pd

# symptom_list must match the columns used during training
input_df = pd.DataFrame([user_input], columns=symptom_list)
prediction = model.predict(input_df)

!pip install streamlit pyngrok --quiet

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# # Load the trained model
# model = joblib.load("disease_model.pkl")
# 
# # Define the symptom list
# symptom_list = ['fever', 'cough', 'fatigue', 'headache']
# 
# st.title("🩺 Disease Predictor")
# st.write("Select your symptoms:")
# 
# user_input = []
# for symptom in symptom_list:
#     if st.checkbox(symptom.capitalize()):
#         user_input.append(1)
#     else:
#         user_input.append(0)
# 
# if st.button("Predict"):
#     input_df = pd.DataFrame([user_input], columns=symptom_list)
#     prediction = model.predict(input_df)
#     st.success(f"✅ Predicted Disease: **{prediction[0]}**")

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import joblib

# Dummy data (replace with your own)
data = pd.DataFrame({
    'fever': [1, 0, 1, 0],
    'cough': [1, 1, 0, 0],
    'fatigue': [1, 1, 0, 0],
    'headache': [0, 1, 0, 1],
    'disease': ['Flu', 'Cold', 'Healthy', 'Healthy']
})

X = data[['fever', 'cough', 'fatigue', 'headache']]
y = data['disease']

model = RandomForestClassifier()
model.fit(X, y)

joblib.dump(model, 'disease_model.pkl')

!ngrok config add-authtoken"2wXFpPXL14cTjKIDKo9nt1WSjrd_4pzGgWa9sHXnRVCuQ7aMA"

from pyngrok import ngrok

# Run the Streamlit app
!streamlit run app.py &> streamlit_log.txt &

# Connect using proto
public_url = ngrok.connect(addr=8501, proto="http")
print(f"🌐 Streamlit app is live at: {public_url}")
